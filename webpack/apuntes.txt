//////////////////////////// WEBPACK //////////////////////////////////////
Webpack para empaquetar tus dependencias tanto en ambientes de producción como desarrollo.
NOS AYUDA A MANIPULAR LOS ARCHIVOS
Webpack es un empaquetador para Javascript y sus amigos. Convierte módulos con dependencias en
archivos estáticos que los navegadores entienden.
Nos permite empaquetar, optimizar los diferentes módulos Javascript y sus dependencia en nuestro
proyecto. Es usado en proyectos basados en Javascript como: React, Vue, Angular entre otros.

*User Experience
    Se logra con una aplicación que:
        Funcione
        Sea rápida
        Cumpla sus necesidades
        Se actualice
        Responda a sus interacciones
        Producto de calidad

*Developer Experience
    Escribir aplicaciones de manera eficiente.
    Tener un código limpio.
    Aplicar tecnología para resolver sus problemas.
    Tener un conjunto de reglas y convenciones.
    Entorno de desarrollo optimizado en productividad.


->CONFIGURACIÓN
    *node.js (clase 10.06)
    *npm (clase 6.9)

-> ^
    con esto el package.json actualiza lo que se usa  ala ultima version, para que esto no pase
        npm install webpack --save --save-exact
    
**basicamente cualquier cosa que sirve a la configuracion es una dependencia de desarrollo**
**esto va en devdepencies**

->webpack-cli
    comand line interface
    Es el api que nos ayuda a configurar estos archivos que tenemos que manipular
    lo recomendable es llamarlo con "npx"

-> mode
    tenemos
        development
        production (default)
    
    configurar
        npx webpack --entry ./index.js --output ./bundle.js --mode development

->manipular archivos con webpack
    npx webpack --entry ./index.js --output ./bundle.js
    npx webpack --entry ./index.js --output ./bundle.js --mode development


**************************************************************************************************
Al ir creciendo nuestra configuración de Webpack iremos agregando cada vez más banderas a nuestros
comandos y terminará como una línea gigante en la terminal. ¿Cómo hacemos que esa línea sea muy
pequeñita, personalizable y escalable? Por medio de un archivo llamado por defecto
webpack.config.js.

Este archivo permite importar módulos usando el formato commonJS y recibe por lo menos dos
configuraciones básicas, un entry y un output.

Entry Point: Es la ruta del archivo principal de nuestra aplicación JS a ser procesado por Webpack.
Se pueden tener varios Entry Points.

Output: Es la ruta de salida donde va a generar nuestro bundle con todos nuestros archivos
especificados como Entry Points empaquetados en uno sólo.
**************************************************************************************************

-> webpack.config.js
    es el archivo de configuracion de webpac, donde podemos tener el input, output, mode, etc
    *vamos a utilizado los modulos de node
    *los import tienen una sintaxys diferentes
        variable donde almacenemos en nombre del modulo y de donde lo rquerimos
        const path = require('path')

->configuraciones personalizadas
    se puede levantar la bandera "--config" que me permite mandarle la ruta de la configuracion
        webpack --config ./external/webpack.config.js
    de esta manera se pueden agregar configuraciones externas para webpack

->multi-entry-Points
    las multiples entradas de js y multiples salidas en un solo archivo de configuracion


